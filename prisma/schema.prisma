generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id        String   @id @default(cuid())
  title     String
  subtitle  String?
  imageUrl  String
  link      String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  type      String   @default("hero")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  image       String?
  order       Int        @default(0)
  isActive    Boolean    @default(true)
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]
}

model FeatureIcon {
  id            String   @id @default(cuid())
  key           String   @unique
  title         String
  titleCs       String
  description   String?
  descriptionCs String?
  imageUrl      String?
  emoji         String?
  order         Int      @default(0)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Invoice {
  id            String    @id @default(cuid())
  invoiceNumber String    @unique
  orderId       String    @unique
  pdfUrl        String?
  issuedAt      DateTime  @default(now())
  dueDate       DateTime
  totalAmount   Float
  vatAmount     Float
  status        String    @default("issued")
  paidAt        DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  order         Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id                   String         @id @default(cuid())
  orderNumber          String         @unique
  customerEmail        String
  customerName         String
  customerPhone        String
  isCompany            Boolean        @default(false)
  companyName          String?
  companyNip           String?
  adminNotes           String?
  billingFirstName     String
  billingLastName      String
  billingAddress       String
  billingCity          String
  billingPostalCode    String
  deliveryFirstName    String?
  deliveryLastName     String?
  deliveryAddress      String?
  deliveryCity         String?
  deliveryPostalCode   String?
  useDifferentDelivery Boolean        @default(false)
  firstName            String
  lastName             String
  address              String
  city                 String
  postalCode           String
  items                Json
  total                Float
  status               String         @default("pending")
  paymentStatus        String         @default("unpaid")
  deliveryMethod       String
  paymentMethod        String
  note                 String?
  trackingNumber       String?
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  invoice              Invoice?
  history              OrderHistory[]
}

model OrderHistory {
  id          String   @id @default(cuid())
  orderId     String
  action      String
  description String
  oldValue    String?
  newValue    String?
  performedBy String   @default("Admin")
  metadata    Json?
  createdAt   DateTime @default(now())
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Product {
  id                String           @id @default(cuid())
  name              String
  code              String?          @unique
  slug              String?          @unique
  description       String?
  detailDescription String?
  price             Decimal
  regularPrice      Decimal?
  stock             Int              @default(0)
  soldCount         Int              @default(0)
  image             String?
  categoryId        String?
  brand             String?
  warranty          String?
  averageRating     Float            @default(0)
  totalRatings      Int              @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  category          Category?        @relation(fields: [categoryId], references: [id])
  images            ProductImage[]
  reviews           ProductReview[]
  variants          ProductVariant[]
  orderItems        OrderItem[]
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  order     Int      @default(0)
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductReview {
  id          String   @id @default(cuid())
  productId   String
  rating      Int
  comment     String?
  authorName  String
  authorEmail String
  isVerified  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductVariant {
  id           String   @id @default(cuid())
  productId    String
  colorName    String?
  colorCode    String?
  sizeName     String?
  sizeOrder    Int      @default(0)
  stock        Int      @default(0)
  price        Decimal?
  regularPrice Decimal? // NEW FIELD ADDED
  imageUrl     String?
  order        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}